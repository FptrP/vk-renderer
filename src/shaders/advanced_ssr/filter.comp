#version 460 core
#include <gbuffer_encode.glsl>
#include <brdf.glsl>

layout (set = 0, binding = 0) uniform sampler2D RAYS_TEX;
layout (set = 0, binding = 1) uniform sampler2D DEPTH_TEX;
layout (set = 0, binding = 2) uniform sampler2D ALBEDO_TEX;
layout (set = 0, binding = 3) uniform sampler2D NORMAL_TEX;
layout (set = 0, binding = 4) uniform sampler2D MATERIAL_TEX;

layout (set = 0, binding = 5, rgba8) uniform image2D OUT_REFLECTIONS;

layout (set = 0, binding = 6) uniform TraceParams {
  mat4 normal_mat;
  uint frame_random;
  float fovy;
  float aspect;
  float znear;
  float zfar;
};

#define NORMALIZE_REFLECTIONS 1
#define ACCUMULATE_REFLECTIONS 2
#define BILATERAL_FILTER 4

#define FULL_RES 0

layout (push_constant) uniform PushConstants {
  uint render_flags;
};

bool is_valid_ray(in vec4 ray);
void process_pixel(ivec2 pos, in vec2 tex_size, in vec3 F0, float roughness, ivec2 center_pixel, float center_depth, inout vec3 color_sum, inout vec3 weight_sum);

layout (local_size_x = 8, local_size_y = 8) in;
void main() {
  ivec2 tex_size = imageSize(OUT_REFLECTIONS);//ivec2(gl_NumWorkGroups.xy * gl_WorkGroupSize.xy);
  ivec2 pixel_pos = ivec2(gl_WorkGroupID.xy * gl_WorkGroupSize.xy + gl_LocalInvocationID.xy);
  vec2 screen_uv = vec2(pixel_pos)/vec2(tex_size);

  if (pixel_pos.x >= tex_size.x || pixel_pos.y >= tex_size.y) {
    return;
  }

  vec4 material = texture(MATERIAL_TEX, screen_uv);
  const float metallic = material.b;
  const float roughness = material.g;

  vec3 albedo = texture(ALBEDO_TEX, screen_uv).xyz;
  vec3 F0 = F0_approximation(albedo, metallic);
  
  vec3 color_sum = vec3(0);
  vec3 weight_sum = vec3(0);
#if FULL_RES
  const ivec2 offsets[] = ivec2[](
    ivec2(0, 0),
    ivec2(-2, 0),
    ivec2(0, 2),
    ivec2(2, 0),
    ivec2(0, -2)
  );
#else
  const ivec2 offsets[] = ivec2[](
    ivec2(0, 0),
    ivec2(-1, 0),
    ivec2(0, 1),
    ivec2(1, 0),
    ivec2(0, -1)
  );
#endif

#if FULL_RES
  float center_depth = texelFetch(DEPTH_TEX, pixel_pos, 0).x;
#else
  float center_depth = texelFetch(DEPTH_TEX, pixel_pos, 1).x;
#endif

  if ((render_flags & NORMALIZE_REFLECTIONS) != 0) {
    for (int i = 0; i < 5; i++) {
      process_pixel(pixel_pos + offsets[i], tex_size, F0, roughness, pixel_pos, center_depth, color_sum, weight_sum);
    }
  } else {
    process_pixel(pixel_pos, tex_size, F0, roughness, pixel_pos, center_depth, color_sum, weight_sum);
  }
 
  if (max(weight_sum.x, max(weight_sum.y ,weight_sum.z)) < 0.001) {
    weight_sum = vec3(1, 1, 1);
  }
  color_sum /= weight_sum;
  imageStore(OUT_REFLECTIONS, pixel_pos, vec4(color_sum, 0));
}

bool is_valid_ray(in vec4 ray) {
  return ray.w != 1.0;
}

void process_pixel(ivec2 pixel_pos, in vec2 tex_size, in vec3 F0, float roughness, ivec2 center_pixel, float center_depth, inout vec3 color_sum, inout vec3 weight_sum) {
#if FULL_RES
  vec4 trace_result = texelFetch(RAYS_TEX, pixel_pos/2, 0);
#else
  vec4 trace_result = texelFetch(RAYS_TEX, pixel_pos, 0);
#endif

  vec2 pixel_uv = vec2(pixel_pos)/vec2(tex_size);
#if FULL_RES
  float pixel_depth = texelFetch(DEPTH_TEX, pixel_pos, 0).x;
#else
  float pixel_depth = texelFetch(DEPTH_TEX, pixel_pos, 1).x;
#endif
  vec3 view_vec = reconstruct_view_vec(pixel_uv, pixel_depth, fovy, aspect, znear, zfar);
  vec3 pixel_normal = sample_gbuffer_normal(NORMAL_TEX, pixel_uv);
  pixel_normal = vec3(normal_mat * vec4(pixel_normal, 0));

  vec3 hit_vec = reconstruct_view_vec(trace_result.xy, trace_result.z, fovy, aspect, znear, zfar);
  vec3 radiance = is_valid_ray(trace_result)? texture(ALBEDO_TEX, trace_result.xy).xyz : vec3(0);
  //float light_dist = length(hit_vec - view_vec); 
  //radiance *= clamp(10/(light_dist*light_dist + 0.001), 0.2, 3);

  vec3 V = -normalize(view_vec);
  vec3 N = pixel_normal;
  vec3 L = normalize(hit_vec - view_vec);
  vec3 H = normalize(V + L);

  float NDF = DistributionGGX(N, H, roughness);        
  float G = GeometrySmith(N, V, L, roughness);      
  vec3 F = fresnelSchlick(max(dot(H, V), 0.0), F0);

  float NdotL = max(dot(N, L), 0);
  vec3 specular = (NDF * G * F)/(4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.0001);
  float pdf = (G * max(dot(V, H), 0) * NDF)/(4 * dot(H, N) * dot(V, H));
  
  float bilateral_weight = 1.0;
  if ((render_flags & BILATERAL_FILTER) != 0) {
    bilateral_weight = max(1 - 1000 * abs(center_depth - pixel_depth)/center_depth, 0);
  }

  float distance_weight = 1 - 0.25 * (abs(center_pixel.x - pixel_pos.x) + abs(center_pixel.y - pixel_pos.y));  

  pdf = max(pdf, 0.0001);
  vec3 weight = vec3(specular * bilateral_weight * distance_weight * NdotL/pdf);

  color_sum += weight * radiance;
  weight_sum += weight;
}