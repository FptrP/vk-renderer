#version 460
#include <gbuffer_encode.glsl>
#include <octahedral.glsl>

layout (set = 0, binding = 0) uniform sampler2D DEPTH_TEX;
layout (set = 0, binding = 1) uniform sampler2D NORMAL_TEX;
//layout (set = 0, binding = 2) uniform sampler2D PROBE_COLOR_TEX;
//layout (set = 0, binding = 3) uniform sampler2D PROBE_DEPTH_TEX;
layout (set = 0, binding = 2) uniform sampler2DArray PROBE_COLOR_TEX;
layout (set = 0, binding = 3) uniform sampler2DArray PROBE_DEPTH_TEX;

layout (set = 0, binding = 4) uniform Constants {
  mat4 inverse_view;
  //vec4 probe_pos;
  vec4 probe_min;
  vec4 probe_max;
  uint grid_size;
  float fovy;
  float aspect;
  float znear;
  float zfar;
};

layout (set = 0, binding = 5, rgba8) uniform writeonly image2D OUT_TEX;

#define TRACE_RESULT_MISS    0
#define TRACE_RESULT_HIT     1
#define TRACE_RESULT_UNKNOWN 2
#define TRACE_STEPS 25

int trace(
  in vec3 ray_origin,
  in vec3 ray_dir,
  inout float tmax,
  out vec2 hittexc,
  out int hit_probe);

int trace_probe(
  in vec3 ray_origin,
  in vec3 ray_dir, 
  inout float tmin,
  inout float tmax,
  inout vec2 hitexc,
  inout int probe_index);

layout (local_size_x = 8, local_size_y = 4) in;

void main() {
  ivec2 tex_size = ivec2(gl_NumWorkGroups.xy * gl_WorkGroupSize.xy);
  ivec2 pixel_pos = ivec2(gl_WorkGroupID.xy * gl_WorkGroupSize.xy + gl_LocalInvocationID.xy);
  
  vec2 screen_uv = vec2(pixel_pos)/vec2(tex_size);

  float pixel_depth = texture(DEPTH_TEX, screen_uv).x;
  if (pixel_depth >= 1.f) {
    imageStore(OUT_TEX, pixel_pos, vec4(0, 0, 0, 0));
    return;
  }
  vec3 view_vec = reconstruct_view_vec(screen_uv, pixel_depth, fovy, aspect, znear, zfar);
  vec3 N = sample_gbuffer_normal(NORMAL_TEX, screen_uv);

  vec3 world_pos = vec3(inverse_view * vec4(view_vec, 1));
  world_pos += 1e-6 * N;
  vec3 camera_pos = vec3(inverse_view * vec4(0, 0, 0, 1));

  vec3 V = normalize(world_pos - camera_pos);
  world_pos -= 1e-6 * V;
  vec3 R = reflect(V, N);
  
  vec4 reflection = vec4(0);
  
  float tmin = 1e-6, tmax = 30.f;
  vec2 hit_pos;
  int probe_index;
  //int res = trace_probe(world_pos, R, tmin, tmax, hit_pos, probe_index);
  int res = trace(world_pos, R, tmax, hit_pos, probe_index);
  if (res == TRACE_RESULT_HIT) {
    reflection = texture(PROBE_COLOR_TEX, vec3(hit_pos, probe_index));
  }

  imageStore(OUT_TEX, pixel_pos, reflection);
}

float dist_squared(vec2 v0, vec2 v1) {
  vec2 t = v0 - v1;
  return dot(t, t);
}

float dist_squared(vec3 v0, vec3 v1) {
  vec3 t = v0 - v1;
  return dot(t, t);
}


void swap_min(inout float a, inout float b) {
  float temp = min(a, b);
  b = max(a, b);
  a = temp;
}

void compute_trace_segments(in vec3 origin, in vec3 dir_frac, in float tmin, in float tmax, out float bounds[5]) {
  bounds[0] = tmin;

  vec3 t = origin * (-dir_frac);
  
  swap_min(t.x, t.y);
  swap_min(t.y, t.z);
  swap_min(t.x, t.y);

  bounds[1] = clamp(t.x, tmin, tmax);
  bounds[2] = clamp(t.y, tmin, tmax);
  bounds[3] = clamp(t.z, tmin, tmax);

  bounds[4] = tmax;
}

const float ZNEAR = 0.05;
const float ZFAR = 80.f;
/*
int trace_segment(
  in vec3 ray_origin,
  in vec3 ray_dir,
  in float t0,
  in float t1,
  inout vec2 hit_texc) {
  
  const float RAY_EPS = 0.001;
  vec3 probe_start = ray_origin + ray_dir * (t0 + RAY_EPS);
  vec3 probe_end = ray_origin + ray_dir * (t1 - RAY_EPS);

  if (dist_squared(probe_start, probe_end) < 0.001) {
    probe_start = ray_dir;
  }

  vec2 start_oct = oct_encode(normalize(probe_start));
  vec2 end_oct = oct_encode(normalize(probe_end));
  vec3 front = oct_center(0.5 * (start_oct + end_oct));
  //calculate depth
  float start_depth = encode_oct_depth(dot(probe_start, front), ZNEAR, ZFAR);
  float end_depth = encode_oct_depth(dot(probe_end, front), ZNEAR, ZFAR);
  //probe space ray
  vec3 p_start = vec3(start_oct, start_depth);
  vec3 p_end = vec3(end_oct, end_depth);

  vec3 delta = p_end - p_start;
  vec2 tex_size = textureSize(PROBE_DEPTH_TEX, 0);

  ivec2 pixel_dist = ivec2(tex_size * abs(delta.xy));
  int steps = max(pixel_dist.x, pixel_dist.y);
  vec3 vec_step = delta/steps;
 
  
  for (int i = 2; i < steps - 1; i++) {
    vec3 p = p_start + vec_step * i;
    float depth = texelFetch(PROBE_DEPTH_TEX, ivec2(floor(p.xy * tex_size)), 0).x;

    float ray_z = decode_oct_depth(p.z, ZNEAR, ZFAR);
    float sampled_z = decode_oct_depth(depth, ZNEAR, ZFAR);

    if (ray_z - 0.001 > sampled_z) {
      if (ray_z - sampled_z > 0.2) {
        return TRACE_RESULT_UNKNOWN;  
      }

      hit_texc = p.xy;
      return TRACE_RESULT_HIT;
    }
  }

  return TRACE_RESULT_MISS;
}*/

#define MAX_T_FLOAT 3.402823466e+38

void initial_advance_ray(vec3 origin, vec3 dir, vec3 inv_dir, vec2 mip_res, vec2 inv_mip_res, vec2 floor_offset, vec2 uv_offset, out vec3 pos, out float current_t) {
  vec2 cur_pos = mip_res * origin.xy;
  vec2 xy_plane = floor(cur_pos) + floor_offset;
  xy_plane = xy_plane * inv_mip_res + uv_offset;
  vec2 t = (xy_plane - origin.xy) * inv_dir.xy;
  current_t = min(t.x, t.y);
  pos = origin + current_t * dir;
}

bool advance_ray(vec3 origin, vec3 direction, vec3 inv_direction, vec2 current_mip_position, vec2 current_mip_resolution_inv, vec2 floor_offset, vec2 uv_offset, float surface_z, inout vec3 position, inout float current_t) {
  vec2 xy_plane = floor(current_mip_position) + floor_offset;
  xy_plane = xy_plane * current_mip_resolution_inv + uv_offset;
  vec3 boundary_planes = vec3(xy_plane, surface_z);

  // Intersect ray with the half box that is pointing away from the ray origin.
  // o + d * t = p' => t = (p' - o) / d
  vec3 t = (boundary_planes - origin) * inv_direction;

    // Prevent using z plane when shooting out of the depth buffer.
  t.z = direction.z > 0 ? t.z : MAX_T_FLOAT;

  // Choose nearest intersection with a boundary.
  float t_min = min(min(min(t.x, t.y), t.z), 1);

  // Smaller z means closer to the camera.
  bool above_surface = surface_z > position.z;

  // Decide whether we are able to advance the ray until we hit the xy boundaries or if we had to clamp it at the surface.
  bool skipped_tile = t_min != t.z && above_surface;

  // Make sure to only advance the ray if we're still above the surface.
  current_t = above_surface ? t_min : current_t;

  // Advance ray
  position = origin + current_t * direction;

  return skipped_tile;
}

vec2 get_mip_resolution(vec2 screen_dimensions, int mip_level) {
  return screen_dimensions * pow(0.5, float(mip_level));
}

vec3 hierarchical_raymarch(in sampler2DArray depth_tex, int probe_index, vec3 origin, vec3 direction, int most_detailed_mip, uint max_traversal_intersections, out bool valid_hit) {
  //const vec3 inv_direction = direction != 0 ? 1.0 / direction : vec3(MAX_T_FLOAT);
  
  const vec3 inv_direction = vec3(
    direction.x != 0 ? 1.0 / direction.x : MAX_T_FLOAT,
    direction.y != 0 ? 1.0 / direction.y : MAX_T_FLOAT,
    direction.z != 0 ? 1.0 / direction.z : MAX_T_FLOAT);
  
  // Start on mip with highest detail.
  int current_mip = 0;

    // Could recompute these every iteration, but it's faster to hoist them out and update them.
  vec2 screen_size = textureSize(depth_tex, 0).xy;
  vec2 current_mip_resolution = get_mip_resolution(screen_size, current_mip);
  vec2 current_mip_resolution_inv = 1.0/current_mip_resolution;

    // Offset to the bounding boxes uv space to intersect the ray with the center of the next pixel.
    // This means we ever so slightly over shoot into the next region. 
  vec2 uv_offset = 0.005 * exp2(most_detailed_mip) / screen_size;
  //uv_offset = direction.xy < 0 ? -uv_offset : uv_offset;
  uv_offset.x = direction.x < 0 ? -uv_offset.x : uv_offset.x;
  uv_offset.y = direction.y < 0 ? -uv_offset.y : uv_offset.y;

  // Offset applied depending on current mip resolution to move the boundary to the left/right upper/lower border depending on ray direction.
  //vec2 floor_offset = direction.xy < 0 ? 0 : 1;
  vec2 floor_offset = vec2(direction.x < 0 ? 0 : 1, direction.y < 0 ? 0 : 1);

    // Initially advance ray to avoid immediate self intersections.
  float current_t;
  vec3 position;
  initial_advance_ray(origin, direction, inv_direction, current_mip_resolution, current_mip_resolution_inv, floor_offset, uv_offset, position, current_t);

  bool exit_due_to_low_occupancy = false;
  int i = 0;
  while (i < max_traversal_intersections && current_mip >= most_detailed_mip && !exit_due_to_low_occupancy) {
    vec2 current_mip_position = current_mip_resolution * position.xy;
    float surface_z = texelFetch(depth_tex, ivec3(current_mip_position, probe_index), current_mip).x;
    bool skipped_tile = advance_ray(origin, direction, inv_direction, current_mip_position, current_mip_resolution_inv, floor_offset, uv_offset, surface_z, position, current_t);
    current_mip += skipped_tile ? 1 : -1;
    current_mip_resolution *= skipped_tile ? 0.5 : 2;
    current_mip_resolution_inv *= skipped_tile ? 2 : 0.5;
    ++i;
    exit_due_to_low_occupancy = false;
    //exit_due_to_low_occupancy = !is_mirror && WaveActiveCountBits(true) <= min_traversal_occupancy;
  }

  valid_hit = (i <= max_traversal_intersections);

  return position;
}

int trace_segment_hi(
  in vec3 ray_origin,
  in vec3 ray_dir,
  in float t0,
  in float t1,
  inout float tmin,
  int probe_index,
  inout vec2 stop_tc
){
  const float RAY_EPS = 0.001;
  vec3 probe_start = ray_origin + ray_dir * (t0 + RAY_EPS);
  vec3 probe_end = ray_origin + ray_dir * (t1 - RAY_EPS);
  //vec3 front = normalize(o_sign_nz(0.5 * (probe_start + probe_end)));
  if (dist_squared(probe_start, probe_end) < 0.001) {
    probe_start = ray_dir;
  }

  vec2 start_oct = oct_encode(normalize(probe_start));
  vec2 end_oct = oct_encode(normalize(probe_end));
  vec3 front = oct_center(0.5 * (start_oct + end_oct));

  //calculate depth
  const float RAY_START_BIAS = 0.0005;  //bias for for not getting immidiate intersection
  float start_depth = encode_oct_depth(dot(probe_start, front), ZNEAR, ZFAR) - RAY_START_BIAS;
  float end_depth = encode_oct_depth(dot(probe_end, front), ZNEAR, ZFAR);
  //probe space ray
  vec3 p_start = vec3(start_oct, start_depth);
  vec3 p_end = vec3(end_oct, end_depth);
  bool valid = false;
  vec3 p_stop = hierarchical_raymarch(PROBE_DEPTH_TEX, probe_index, p_start, p_end - p_start, 0, TRACE_STEPS, valid);
  
  const float HIT_BIAS = 0.0005; 

  if (valid) { 
    stop_tc = p_stop.xy;
    vec3 stop_dir = oct_decode(stop_tc.xy);
    float coef = decode_oct_depth(p_stop.z, ZNEAR, ZFAR)/dot(stop_dir, front);
    vec3 ray_stop = stop_dir * coef;
    tmin = length(ray_stop - ray_origin);

    float sampled_depth = textureLod(PROBE_DEPTH_TEX, vec3(p_stop.xy, probe_index), 0).x;
    if (p_stop.z > 1) {
      return TRACE_RESULT_MISS;
    }

    if (p_stop.z > sampled_depth + HIT_BIAS) {
      return TRACE_RESULT_UNKNOWN;
    }

    if (p_stop.z > sampled_depth - HIT_BIAS) {
      return TRACE_RESULT_HIT;
    }
  }

  return TRACE_RESULT_MISS;
}

int get_start_probe_index(vec3 world_pos) {
  vec3 probe_step = (probe_max.xyz - probe_min.xyz)/float(grid_size - 1);
  vec3 coord = clamp((world_pos - probe_min.xyz)/probe_step, vec3(0, 0, 0), vec3(grid_size - 2, 2, grid_size - 2));
  int x = int(floor(coord.x));
  int y = int(floor(coord.z));
  return y * int(grid_size) + x;
}

vec3 get_probe_position(int index) {
  float y = float(index / grid_size);
  float x = float(index % grid_size);
  vec3 probe_step = (probe_max.xyz - probe_min.xyz)/float(grid_size - 1);
  return probe_min.xyz + vec3(x, 0, y) * probe_step;
}

int next_probe(int start_probe, int i) {
  int x = start_probe % int(grid_size);
  int y = start_probe / int(grid_size);
  int dy = (i >> 1) & 1;
  int dx = i & 1;
  return (y + dy) * int(grid_size) + x + dx;
}

int trace_probe(
  in vec3 ray_origin,
  in vec3 ray_dir, 
  inout float tmin,
  inout float tmax,
  inout vec2 hitexc,
  inout int probe_index) {
  
  const float degenerateEpsilon = 0.002;
  probe_index = get_start_probe_index(ray_origin);
  vec3 probeOrigin = get_probe_position(probe_index);

  vec3 probeRayOrigin = ray_origin - probeOrigin;
  vec3 probeRayDir = normalize(ray_dir);

  float segments[5];
  compute_trace_segments(probeRayOrigin, 1.0/probeRayDir, tmin, tmax, segments);

  for (int i = 0; i < 4; i++) {
    if (abs(segments[i+1] - segments[i]) >= degenerateEpsilon) {
      int result = trace_segment_hi(probeRayOrigin, probeRayDir, segments[i], segments[i+1], tmin, probe_index, hitexc);
      //tmin = segments[i];
      if (result != TRACE_RESULT_MISS) {
        return result;
      }
    }
  }

  return TRACE_RESULT_MISS;
}

int trace_probe(
  in vec3 ray_origin,
  in vec3 ray_dir,
  int probe_index, 
  inout float tmin,
  inout float tmax,
  inout vec2 hitexc) {
  
  const float degenerateEpsilon = 0.002;
  vec3 probeOrigin = get_probe_position(probe_index);

  vec3 probeRayOrigin = ray_origin - probeOrigin;
  vec3 probeRayDir = normalize(ray_dir);

  float segments[5];
  compute_trace_segments(probeRayOrigin, 1.0/probeRayDir, tmin, tmax, segments);

  for (int i = 0; i < 4; i++) {
    if (abs(segments[i+1] - segments[i]) >= degenerateEpsilon) {
      int result = trace_segment_hi(probeRayOrigin, probeRayDir, segments[i], segments[i+1], tmin, probe_index, hitexc);
      //tmin = segments[i];
      if (result != TRACE_RESULT_MISS) {
        return result;
      }
    }
  }

  return TRACE_RESULT_MISS;
}

int trace(
  in vec3 ray_origin,
  in vec3 ray_dir,
  inout float tmax,
  out vec2 hittexc,
  out int hit_probe)
{
  hit_probe = -1;
  int base_probe = get_start_probe_index(ray_origin);
  int i = 0;

  int probes_left = 4;
  float tmin = 0.f;
  
  int result = TRACE_RESULT_UNKNOWN;

  while (probes_left > 0) {
    int probe_id = next_probe(base_probe, i);
    result = trace_probe(ray_origin, ray_dir, probe_id, tmin, tmax, hittexc);
    if (result == TRACE_RESULT_UNKNOWN) {
      i = (i + 3) & 3;
      probes_left--;
    } else {
      if (result == TRACE_RESULT_HIT) {
        hit_probe = probe_id;
      }
      break;
    }
  }

  return result;
}