#version 460
#include <octahedral.glsl>

layout (set = 0, binding = 0) uniform samplerCube input_color;
layout (set = 0, binding = 1) uniform samplerCube input_distance;

layout (set = 0, binding = 2, rgba8) uniform writeonly image2D oct_color;
layout (set = 0, binding = 3, r16f) uniform writeonly image2D oct_depth;

const float ZNEAR = 0.05;
const float ZFAR = 80.f;

layout (local_size_x = 8, local_size_y = 4) in;
void main() {
  ivec2 tex_size = ivec2(gl_NumWorkGroups.xy * gl_WorkGroupSize.xy);
  ivec2 pixel_pos = ivec2(gl_WorkGroupID.xy * gl_WorkGroupSize.xy + gl_LocalInvocationID.xy);
  
  vec2 screen_uv = vec2(pixel_pos)/vec2(tex_size);
  vec3 cube_direction = oct_decode(screen_uv);

  vec4 sampled_color = texture(input_color, cube_direction);
  float sampled_distance = texture(input_distance, cube_direction).r;

  vec3 view_dir = cube_direction * sampled_distance;
  vec3 front = oct_center(screen_uv);
  float depth = encode_oct_depth(clamp(dot(view_dir, front), ZNEAR, ZFAR), ZNEAR, ZFAR);

  imageStore(oct_color, pixel_pos, sampled_color);
  imageStore(oct_depth, pixel_pos, vec4(depth, 0, 0, 0));
}